---
import Header from "~/components/Header.astro";
import BasePage from "~/layouts/BasePage.astro";

import IssueList from "~/components/IssueList/IssueList.astro";
import IssueCard from "~/components/IssueList/IssueCard.astro";
import IssueEyebrow from "~/components/IssueList/IssueEyebrow.astro";
import IssueTitle from "~/components/IssueList/IssueTitle.astro";

import formatDate from "~/utils/formatDate";

import { getCollection, type CollectionEntry } from "astro:content";

export interface Props {
  entry: CollectionEntry<"newsletter">;
}

// Generate paths for all the issues in the newsletter collection
export async function getStaticPaths() {
  const newsletterIssues = await getCollection("newsletter");

  return newsletterIssues.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the static entry for the current issue
const { entry } = Astro.props;

// Get the last three issues, excluding the current issue
const allIssues = await getCollection("newsletter");
const issues = allIssues.sort((a, b) => {
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);

  return dateB.getTime() - dateA.getTime();
});
const lastIssues = issues
  .filter((issue) => issue.slug !== entry.slug)
  .slice(0, 3);

// Render the markdown content
const { Content } = await entry.render();
---

<BasePage
  slug={entry.slug}
  title={`${entry.data.title} - DEPT® Node Zebra`}
  description={entry.data.tagline}
  date={entry.data.date}
>
  <Header>
    <p class="text-sm mb-2 text-light">{entry.data.title.toUpperCase()}</p>
    <h1 class="text-3xl max-w-xl">{entry.data.tagline}</h1>
    <div class="flex gap-12 mt-12">
      <div>
        <p class="text-light text-base">Read time</p>
        <p>{entry.data.length} minutes</p>
      </div>
      <div>
        <p class="text-light text-base">Date</p>
        <p>{formatDate(entry.data.date)}</p>
      </div>
    </div>
  </Header>

  <div class="mx-auto max-w-3xl py-8 px-4 sm:px-6 lg:px-16">
    <Content />
  </div>

  <div class="flex flex-col md:flex-row">
    <div class="text-white bg-onyx grow px-4 sm:px-6 lg:px-16 py-24">
      <p class="text-5xl">Read more</p>
    </div>
    <div class="py-14 md:py-6 px-4 sm:px-6 lg:px-16 max-w-3xl mx-auto">
      <IssueList>
        {
          lastIssues.map((issue) => (
            <IssueCard title={issue.data.tagline} variant="sm">
              <IssueEyebrow>
                <span>{issue.data.title.toUpperCase()}</span>
                <span>•</span>
                <span>{formatDate(issue.data.date)}</span>
              </IssueEyebrow>

              <IssueTitle to={`/newsletter/${issue.slug}`}>
                {issue.data.tagline}
              </IssueTitle>
            </IssueCard>
          ))
        }
      </IssueList>
    </div>
  </div>
</BasePage>
